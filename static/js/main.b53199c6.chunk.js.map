{"version":3,"sources":["images/react-name-logo.svg","containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","box","padding","margin","content","paddingTop","height","logo","width","Home","classes","useState","nameDatabase","setNameDatabase","char1","setChar1","char2","setChar2","loading","setLoading","generated","setGenerated","useEffect","axios","get","then","res","data","results","catch","err","console","log","Box","className","src","alt","display","justifyContent","yomi","image","strokes","Typography","Button","onClick","yomi1","yomi2","c1","Math","floor","random","c2","読み","音読み","訓読み","MJ文字図形","uri","総画数","color","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,6C,kPCUrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,IAAK,CACHC,QAAS,OACTC,OAAQ,QAEVC,QAAQ,CACJC,WAAY,OACZC,OAAQ,SAEZC,KAAM,CACFC,MAAO,QACPF,OAAQ,aA+FDG,MA3Ff,WACI,IAAMC,EAAUZ,IADJ,EAE4Ba,mBAAS,IAFrC,mBAELC,EAFK,KAESC,EAFT,OAGcF,mBAAS,IAHvB,mBAGLG,EAHK,KAGEC,EAHF,OAIcJ,mBAAS,IAJvB,mBAILK,EAJK,KAIEC,EAJF,OAKkBN,oBAAS,GAL3B,mBAKLO,EALK,KAKIC,EALJ,OAMsBR,oBAAS,GAN/B,mBAMLS,EANK,KAMMC,EANN,KAsDZ,OA9CAC,qBAAU,WACNC,IAAMC,IAAI,6FACTC,MAAK,SAAAC,GACFb,EAAgBa,EAAIC,KAAKC,YAE5BH,MAAK,WACFN,GAAW,MAEdU,OAAM,SAAAC,GACHC,QAAQC,IAAIF,QAEjB,IAoCC,6BACI,kBAACG,EAAA,EAAD,CAAKC,UAAWxB,EAAQN,SACtBc,IAAYE,EACV,yBAAKe,IAAK5B,IAAM6B,IAAI,OAAOF,UAAWxB,EAAQH,OAE9C,6BACI,kBAAC0B,EAAA,EAAD,CAAKI,QAAQ,OAAOC,eAAe,UAC/B,kBAACL,EAAA,EAAD,KACI,2BAAInB,EAAMyB,MACV,yBAAKJ,IAAKrB,EAAM0B,MAAOJ,IAAI,UAC3B,2BAAItB,EAAM2B,QAAV,WAEJ,kBAACR,EAAA,EAAD,KACI,2BAAIjB,EAAMuB,MACV,yBAAKJ,IAAKnB,EAAMwB,MAAOJ,IAAI,UAC3B,2BAAIpB,EAAMyB,QAAV,YAGR,kBAACC,EAAA,EAAD,KAAa5B,EAAM2B,QAAUzB,EAAMyB,QAAnC,YAIR,kBAACR,EAAA,EAAD,CAAKC,UAAWxB,EAAQT,KACpB,kBAAC0C,EAAA,EAAD,CAAQC,QAzDS,WACzB,IAGIC,EACAC,EAJAC,EAAKnC,EAAaoC,KAAKC,MAAuB,KAAhBD,KAAKE,WACnCC,EAAKvC,EAAaoC,KAAKC,MAAuB,KAAhBD,KAAKE,WAMnCL,EADDE,EAAGK,aAAGC,mBACGN,EAAGK,aAAGC,mBAAI,GAEVN,EAAGK,aAAGE,mBAAI,GAIlBR,EADDK,EAAGC,aAAGC,mBACGF,EAAGC,aAAGC,mBAAI,GAEVF,EAAGC,aAAGE,mBAAI,GAGtBvC,EAAS,CACLyB,MAAOO,EAAGQ,2BAAOC,IACjBjB,KAAMM,EACNJ,QAASM,EAAGU,qBAGhBxC,EAAS,CACLuB,MAAOW,EAAGI,2BAAOC,IACjBjB,KAAMO,EACNL,QAASU,EAAGM,qBAEhBpC,GAAa,IA2BkCqC,MAAM,UAAUC,QAAQ,aAA/D,+CAEJ,kBAAC1B,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,kMAEJ,kBAACT,EAAA,EAAD,CAAKC,UAAWxB,EAAQT,KACpB,kBAACyC,EAAA,EAAD,qCC9FDkB,MAVf,WACE,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCGY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd9C,OAAM,SAAA+C,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.b53199c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-name-logo.79cb9c35.svg\";","import React,{useState, useEffect} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box'\n\nimport axios from 'axios';\nimport { Typography } from '@material-ui/core';\n\nimport logo from '../images/react-name-logo.svg'\n\nconst useStyles = makeStyles((theme) => ({\n    box: {\n      padding: \"10px\",\n      margin: \"10px\"\n    },\n    content:{\n        paddingTop: \"20px\",\n        height: \"300px\",\n    },\n    logo: {\n        width: \"243px\",\n        height: \"243px\"\n    }\n  }));\n\nfunction Home() {\n    const classes = useStyles();\n    const [nameDatabase, setNameDatabase] = useState([]);\n    const [char1, setChar1] = useState(\"\")\n    const [char2, setChar2] = useState(\"\")\n    const [loading, setLoading] = useState(true);\n    const [generated, setGenerated] = useState(false);\n\n    useEffect(() => {\n        axios.get('https://mojikiban.ipa.go.jp/mji/q?漢字施策=人名用漢字')\n        .then(res => {\n            setNameDatabase(res.data.results);\n        })\n        .then(() => {\n            setLoading(false);\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    }, [])\n\n    const handleGeneratorClick = () => {\n        let c1 = nameDatabase[Math.floor( Math.random() * 2999 )];\n        let c2 = nameDatabase[Math.floor( Math.random() * 2999 )];\n\n        let yomi1;\n        let yomi2;\n\n        if(c1.読み.音読み){\n            yomi1 = c1.読み.音読み[0]\n        } else {\n            yomi1 = c1.読み.訓読み[0]\n        }\n\n        if(c2.読み.音読み){\n            yomi2 = c2.読み.音読み[0]\n        } else {\n            yomi2 = c2.読み.訓読み[0]\n        }\n\n        setChar1({\n            image: c1.MJ文字図形.uri,\n            yomi: yomi1,\n            strokes: c1.総画数,\n        });\n\n        setChar2({\n            image: c2.MJ文字図形.uri,\n            yomi: yomi2,\n            strokes: c2.総画数,\n        });\n        setGenerated(true);\n    }\n\n    return (\n        <div>\n            <Box className={classes.content}>\n            { loading || !generated ? (\n                <img src={logo} alt=\"logo\" className={classes.logo}/>\n            ) : (\n                <div>\n                    <Box display=\"flex\" justifyContent=\"center\">\n                        <Box>\n                            <p>{char1.yomi}</p>\n                            <img src={char1.image} alt=\"char1\"/>\n                            <p>{char1.strokes}画</p>\n                        </Box>\n                        <Box>\n                            <p>{char2.yomi}</p>\n                            <img src={char2.image} alt=\"char2\"/>\n                            <p>{char2.strokes}画</p>\n                        </Box>\n                    </Box>\n                    <Typography>{char1.strokes + char2.strokes}画</Typography>\n                </div>\n            ) }\n            </Box>\n            <Box className={classes.box}>\n                <Button onClick={handleGeneratorClick} color=\"primary\" variant=\"contained\">名前を生成する</Button>\n            </Box>\n            <Box >\n                <Typography>※独立行政法人情報処理推進機構(IPA)のMJ文字情報APIを使用しています。</Typography>\n            </Box>\n            <Box className={classes.box}>\n                <Typography>© 2020 shintaro-hirose</Typography>\n            </Box>\n            \n        </div>\n    )\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\n\nimport Home from './containers/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Home />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}